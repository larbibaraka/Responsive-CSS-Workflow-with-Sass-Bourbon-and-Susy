@charset "UTF-8";
/* # Module: Susy Error [function] */
/* ------------------------------- */
/* Test: Allow errors to return without blocking compilation */
/*   ✔ [assert-equal] Allow errors to return without blocking compilation */
/*  */
/*  */
/* # Module: Su Is Comparable [function] */
/* ------------------------------------- */
/* Test: Fully fluid */
/*   ✔ [assert-equal] Fully fluid */
/*  */
/* Test: Comparable static */
/*   ✔ [assert-equal] Comparable static */
/*  */
/* Test: Mixed fluid-static */
/*   ✔ [assert-false] Mixed fluid-static */
/*  */
/* Test: Non-comparable static */
/*   ✔ [assert-false] Non-comparable static */
/*  */
/*  */
/* # Module: Susy Map Add Units [function] */
/* --------------------------------------- */
/* Test: Matched units */
/*   ✔ [assert-equal] Matched units */
/*  */
/* Test: Comparable units */
/*   ✔ [assert-equal] Comparable units */
/*  */
/* Test: New units */
/*   ✔ [assert-equal] New units */
/*  */
/*  */
/* # Module: Susy Flatten [function] */
/* --------------------------------- */
/* Test: Flattens a multi-dimensional list */
/*   ✔ [assert-unequal] Confirm that the list is not flat before testing */
/*   ✔ [assert-equal] Flattens a multi-dimensional list */
/*  */
/* Test: Returns flat list un-changed */
/*   ✔ [assert-equal] Returns flat list un-changed */
/*  */
/* Test: Do not flatten maps */
/*   ✔ [assert-equal] Do not flatten maps */
/*  */
/*  */
/* # Module: Su Valid Span [function] */
/* ---------------------------------- */
/* Test: Arbitrary span */
/*   ✔ [assert-equal] A unitless span is valid */
/*  */
/* Test: Explicit span */
/*   ✔ [assert-equal] A united length is valid */
/*  */
/* Test: Explicit list of columns */
/*   ✔ [assert-equal] A list of comparable columns is valid */
/*  */
/* Test: Mismatched list */
/*   ✔ [assert-equal] Mismatched list */
/*  */
/* Test: Single-item unitless explicit list */
/*   ✔ [assert-equal] Single-item unitless explicit list */
/*  */
/* Test: Unknown type error */
/*   ✔ [assert-equal] Unknown type error */
/*  */
/*  */
/* # Module: Su Valid Columns [function] */
/* ------------------------------------- */
/* Test: Fluid columns */
/*   ✔ [assert-equal] Fluid columns */
/*  */
/* Test: No single columns */
/*   ✔ [assert-equal] Has no units */
/*   ✔ [assert-equal] Has units */
/*  */
/* Test: Static columns */
/*   ✔ [assert-equal] Static columns */
/*  */
/* Test: Mismatched units */
/*   ✔ [assert-equal] Mismatched units */
/*  */
/* Test: Silent failure */
/*   ✔ [assert-equal] Silent failure */
/*  */
/* Test: Mismatched unitless */
/*   ✔ [assert-equal] Mismatched unitless */
/*   ✔ [assert-equal] Mismatched unitless */
/*  */
/*  */
/* # Module: Su Valid Gutters [function] */
/* ------------------------------------- */
/* Test: Fluid */
/*   ✔ [assert-equal] A unitless number is a valid setting for gutters */
/*  */
/* Test: Static */
/*   ✔ [assert-equal] Any length is a valid setting for gutters */
/*  */
/* Test: Invalid gutters error */
/*   ✔ [assert-equal] Invalid gutters error */
/*  */
/*  */
/* # Module: Su Valid Spread [function] */
/* ------------------------------------ */
/* Test: Numeric spread */
/*   ✔ [assert-equal] Valid number is returned directly */
/*  */
/* Test: Unknown spread error */
/*   ✔ [assert-equal] Unknown spread error */
/*  */
/*  */
/* # Module: Su Valid Location [function] */
/* -------------------------------------- */
/* Test: Numeric column position */
/*   ✔ [assert-equal] Valid position returns unchanged */
/*  */
/* Test: Location units error */
/*   ✔ [assert-equal] Location units error */
/*  */
/* Test: Location floating-point error */
/*   ✔ [assert-equal] Location floating-point error */
/*  */
/* Test: Location off-grid error */
/*   ✔ [assert-equal] Location off-grid error */
/*   ✔ [assert-equal] Location off-grid error */
/*  */
/* Test: Location/span combination error */
/*   ✔ [assert-equal] Location/span combination error */
/*  */
/*  */
/* # Module: Su Span [function] */
/* ---------------------------- */
/* Test: Fluid */
/*   ✔ [assert-equal] Returns fluid span if no units are given */
/*  */
/* Test: Static */
/*   ✔ [assert-equal] Returns static span if units are given */
/*  */
/* Test: Explicit column span */
/*   ✔ [assert-equal] Handles explicit column-spans */
/*  */
/* Test: Explicit length span */
/*   ✔ [assert-equal] Handles explicit length-spans */
/*  */
/* Test: Mixed fluid-static */
/*   ✔ [assert-equal] Mixed fluid-static */
/*  */
/* Test: Mixed static */
/*   ✔ [assert-equal] Mixed static */
/*  */
/* Test: Mixed static with location */
/*   ✔ [assert-equal] Mixed static with location */
/*  */
/* Test: Single span, mixed columns and gutters */
/*   ✔ [assert-equal] Single span, mixed columns and gutters */
/*  */
/*  */
/* # Module: Su Gutter [function] */
/* ------------------------------ */
/* Test: Static gutters */
/*   ✔ [assert-equal] Static gutters are returned directly */
/*  */
/* Test: Fluid gutters */
/*   ✔ [assert-equal] Gutters are calculated as a percentage of context */
/*  */
/*  */
/* # Module: Su Sum [function] */
/* --------------------------- */
/* Test: Calculate the total units in a fluid grid */
/*   ✔ [assert-equal] Returns combined column and gutter units */
/*  */
/* Test: Calculate the total units in a static grid */
/*   ✔ [assert-equal] Returns combined column and gutter units */
/*  */
/* Test: Ignore 0 gutters */
/*   ✔ [assert-equal] Ignore 0 gutters */
/*  */
/* Test: Handle single-column spans */
/*   ✔ [assert-equal] No static gutters are added to fluid grids */
/*  */
/*  */
/* # Module: Su Slice [function] */
/* ----------------------------- */
/* Test: Slice a grid */
/*   ✔ [assert-equal] Returns subset of asymmetrical columns based on span and location */
/*  */
/* Test: Slice a grid with fractions */
/*   ✔ [assert-equal] Slice a fraction of an asymmetrical column */
/*  */
/*  */
/* # Module: Su Calc Sum [function] */
/* -------------------------------- */
/* Test: Mixed fluid-static */
/*   ✔ [assert-equal] Mixed fluid-static */
/*  */
/* Test: Mixed static */
/*   ✔ [assert-equal] Mixed static */
/*  */
/* Test: Zero handling */
/*   ✔ [assert-equal] Zero handling */
/*  */
/*  */
/* # Module: Su Calc Span [function] */
/* --------------------------------- */
/* Test: Mixed fluid-static */
/*   ✔ [assert-equal] Mixed fluid-static */
/*  */
/* Test: Mixed static */
/*   ✔ [assert-equal] Mixed static */
/*  */
/*  */
/* # Module: Su Needs Calc [function] */
/* ---------------------------------- */
/* Test: Fully fluid */
/*   ✔ [assert-false] Fully fluid */
/*  */
/* Test: Fully static */
/*   ✔ [assert-false] Fully static */
/*  */
/* Test: Static span and gutters */
/*   ✔ [assert-false] Static span and gutters */
/*  */
/* Test: Mismatched span units (complex) */
/*   ✔ [assert-true] Mismatched span units (complex) */
/*  */
/* Test: Mismatched span units (simple) */
/*   ✔ [assert-true] Mismatched span units (simple) */
/*   ✔ [assert-true] Mismatched span units (simple) */
/*  */
/* Test: Mismatched gutter units */
/*   ✔ [assert-true] Mismatched gutter units */
/*  */
/* Test: Fluid span and gutters, mixed columns */
/*   ✔ [assert-true] Fluid span and gutters, mixed columns */
/*  */
/* Test: Single span, mixed columns and gutters */
/*   ✔ [assert-false] Single span, mixed columns and gutters */
/*  */
/* Test: Single wide span, mixed columns and gutters */
/*   ✔ [assert-true] Single wide span, mixed columns and gutters */
/*  */
/*  */
/* # Module: Susy Settings [function] */
/* ---------------------------------- */
/* Test: Default configuration */
/*   ✔ [assert-equal] Returns merged map of Susy default config settings */
/*  */
/* Test: Configuration overrides */
/*   ✔ [assert-equal] Returns merged map of Susy defaults with custom overrides */
/*  */
/* Test: Multiple overrides */
/*   ✔ [assert-equal] Returns merged map of Susy defaults with multiple overrides */
/*  */
/*  */
/* # Module: Repeat [function] */
/* --------------------------- */
/* Test: Repeat single values */
/*   ✔ [assert-equal] Repeat single values */
/*  */
/* Test: Repeat list values */
/*   ✔ [assert-equal] Repeat list values */
/*  */
/*  */
/* # Module: Susy Get [function] */
/* ----------------------------- */
/* Test: Get value from user settings */
/*   ✔ [assert-equal] Susy-get and map-get should return the same value */
/*  */
/* Test: Get falsey value from user settings */
/*   ✔ [assert-equal] Susy-get and map-get should return the same value */
/*  */
/* Test: Get value from defaults */
/*   ✔ [assert-equal] Susy-get and map-get should return the same value */
/*  */
/* Test: Unknown setting error */
/*   ✔ [assert-equal] Unknown setting error */
/*  */
/*  */
/* # Module: Susy Parse [function] */
/* ------------------------------- */
/* Test: Simple grid span */
/*   ✔ [assert-equal] A single unitless number is returned as span only */
/*  */
/* Test: Span with symmetrical column-slice */
/*   ✔ [assert-equal] Span and symmetrical columns are properly mapped */
/*  */
/* Test: Span with spread */
/*   ✔ [assert-equal] Span and spread are properly mapped */
/*  */
/* Test: Span with location and asymmetrical columns */
/*   ✔ [assert-equal] Span, location, and asymmetrical columns are properly mapped */
/*  */
/* Test: Span with keyword location */
/*   ✔ [assert-equal] Span, keyword location, and columns are properly mapped */
/*  */
/* Test: Span all */
/*   ✔ [assert-equal] Span "all" is properly mapped */
/*  */
/* Test: Container-spread */
/*   ✔ [assert-equal] Container-spread is properly mapped */
/*  */
/* Test: Keywords before span */
/*   ✔ [assert-equal] Keywords can be passed in before the span value */
/*  */
/* Test: Explicit asymmetrical span */
/*   ✔ [assert-equal] Explicit asymmetrical span is parsed properly */
/*  */
/* Test: Parse gutters */
/*   ✔ [assert-equal] Set-gutters keyword allows shorthand gutters */
/*  */
/* Test: Unknown string parsing error */
/*   ✔ [assert-equal] Unknown string parsing error */
/*  */
/* Test: Unknown number parsing error */
/*   ✔ [assert-equal] Unknown number parsing error */
/*   ✔ [assert-equal] Unknown number parsing error */
/*  */
/* Test: Unknown type parsing error */
/*   ✔ [assert-equal] Unknown type parsing error */
/*  */
/*  */
/* # Module: Susy Normalize [function] */
/* ----------------------------------- */
/* Test: All values */
/*   ✔ [assert-equal] All values */
/*  */
/* Test: Missing Columns */
/*   ✔ [assert-equal] Missing Columns */
/*  */
/* Test: Last */
/*   ✔ [assert-equal] Last */
/*  */
/* Test: All */
/*   ✔ [assert-equal] All */
/*  */
/*  */
/* # Module: Susy Normalize Span [funtion] */
/* --------------------------------------- */
/* Test: Keyword span */
/*   ✔ [assert-equal] Keyword span */
/*  */
/*  */
/* # Module: Susy Normalize Columns [function] */
/* ------------------------------------------- */
/* Test: Nothing to normalize */
/*   ✔ [assert-equal] Nothing to normalize */
/*  */
/* Test: Nothing to normalize */
/*   ✔ [assert-equal] Nothing to normalize */
/*  */
/* Test: Get Symmetrical Slice */
/*   ✔ [assert-equal] Get Symmetrical Slice */
/*  */
/* Test: Flatten lists */
/*   ✔ [assert-unequal] Flatten lists */
/*   ✔ [assert-equal] Confirm that the list is now flat */
/*  */
/* Test: Error on failed slice */
/*   ✔ [assert-equal] Error on failed slice */
/*  */
/*  */
/* # Module: Susy Normalize Spread [function] */
/* ------------------------------------------ */
/* Test: Keyword spread */
/*   ✔ [assert-equal] Keyword is converted to a number for grid-math */
/*  */
/* Test: Numeric spread */
/*   ✔ [assert-equal] Number is returned directly */
/*  */
/*  */
/* # Module: Susy Normalize Location [function] */
/* -------------------------------------------- */
/* Test: Numeric column position */
/*   ✔ [assert-equal] Valid position returns unchanged */
/*  */
/* Test: Initial position keyword */
/*   ✔ [assert-equal] Valid initial keyword returns 1 */
/*  */
/* Test: Final position keyword */
/*   ✔ [assert-equal] Final keyword returns calculated position from end */
/*  */
/*  */
/* # Module: Susy Span [function] */
/* ------------------------------ */
/* Test: Simple span */
/*   ✔ [assert-equal] Simple span is calculated correctly using defaults */
/*  */
/* Test: Span with location */
/*   ✔ [assert-equal] Span with location is calculated correctly using column defaults */
/*  */
/* Test: Static math */
/*   ✔ [assert-equal] Static math returns length based on column-width */
/*  */
/* Test: Span with spread */
/*   ✔ [assert-equal] Spread adds gutter width to usual span */
/*  */
/* Test: Explicit span */
/*   ✔ [assert-equal] Span accepts explicit columns */
/*  */
/* Test: Span error */
/*   ✔ [assert-equal] Error when there is no span */
/*  */
/* Test: Complex Grid */
/*   ✔ [assert-equal] Complex Grid */
/*   ✔ [assert-equal] Complex Grid */
/*  */
/* Test: Convert context-number to slice */
/*   ✔ [assert-equal] Convert context-number to slice */
/*  */
/* Test: All */
/*   ✔ [assert-equal] All */
/*  */
/*  */
/* # Module: Susy Gutter [function] */
/* -------------------------------- */
/* Test: Fluid gutters */
/*   ✔ [assert-equal] Gutters are calculated as a percentage of context */
/*  */
/* Test: Nested gutters */
/*   ✔ [assert-equal] Gutters are calculated as a percentage of context */
/*  */
/* Test: Nested Asymmetrical gutters */
/*   ✔ [assert-equal] Gutters are calculated as a percentage of context */
/*  */
/* Test: Static gutters */
/*   ✔ [assert-equal] Static gutters are returned directly */
/*  */
/* Test: Gutters with container-spread */
/*   ✔ [assert-equal] Factor container-spread into gutter context */
/*  */
/* Test: Gutters with custom config */
/*   ✔ [assert-equal] Gutters account for custom configuration */
/*  */
/* Test: Gutters with full span shorthand */
/*   ✔ [assert-equal] Allow full span shorthand */
/*  */
/*  */
/* # Module: Susy slice [function] */
/* ------------------------------- */
/* Test: Numerical slicing */
/*   ✔ [assert-equal] Returns a sub-slice of columns */
/*  */
/* Test: Keyword slicing: first */
/*   ✔ [assert-equal] Returns a keyword-slice of columns */
/*  */
/* Test: Keyword slicing: last */
/*   ✔ [assert-equal] Keyword slicing: last */
/*  */
/*  */
/* # Module: Susy Compile [function] */
/* --------------------------------- */
/* Test: Compiles normalized settings map from shorthand */
/*   ✔ [assert-equal] Compiles normalized settings map from shorthand */
/*  */
/* Test: Compiles normalized settings map from existing maps */
/*   ✔ [assert-equal] Compiles normalized settings map from existing maps */
/*  */
/* Test: Missing columns */
/*   ✔ [assert-equal] Missing columns */
/*  */
/* Test: Allows context-only parsing */
/*   ✔ [assert-equal] Allows context-only parsing */
/*  */
/* Test: Handles context-count as slice */
/*   ✔ [assert-equal] Handles context-count as slice */
/*  */
/* Test: Last */
/*   ✔ [assert-equal] Last */
/*  */
/* Test: All */
/*   ✔ [assert-equal] All */
/*  */
/*  */
/* # Module: Su Call [function] */
/* ---------------------------- */
/* Test: Calls su-span */
/*   ✔ [assert-equal] Calls su-span */
/*  */
/* Test: Calls su-gutter */
/*   ✔ [assert-equal] Calls su-gutter */
/*  */
/* Test: Calls su-slice */
/*   ✔ [assert-equal] Calls su-slice */
/*  */
/* Test: Does not call other functions */
/*   ✔ [assert-equal] Does not call other functions */
/*   ✔ [assert-equal] Does not call other functions */
/*   ✔ [assert-equal] Does not call other functions */
/*  */
/*  */
/* # Module: Unprefix */
/* ------------------ */
/* Test: Span */
/*   ✔ [assert-equal] Unprefixed span() returns same result as susy-span() */
/*  */
/* Test: Gutter */
/*   ✔ [assert-equal] Unprefixed gutter() returns same result as susy-gutter() */
/*   ✔ [assert-equal] Unprefixed gutter() returns same result as susy-gutter() */
/*  */
/* Test: Slice */
/*   ✔ [assert-equal] Unprefixed slice() returns same result as susy-slice() */
/*  */
/*  */
/* # Module: SVG Validate Units [function] */
/* --------------------------------------- */
/* Test: Success */
/*   ✔ [assert-equal] Ems are a valid unit for SVG */
/*  */
/* Test: Error */
/*   ✔ [assert-equal] Ems are a valid unit for SVG */
/*  */
/*  */
/* # Module: SVG Rect [function] */
/* ----------------------------- */
/* Test: Width and position */
/*   ✔ [assert-equal] Width and position */
/*  */
/* Test: Offset */
/*   ✔ [assert-equal] Offset */
/*  */
/* Test: Mismatched Offset */
/*   ✔ [assert-equal] Mismatched Offset */
/*  */
/*  */
/* # Module: SVG Color [function] */
/* ------------------------------ */
/* Test: Hex color */
/*   ✔ [assert-equal] Hex color */
/*  */
/* Test: non-hex color */
/*   ✔ [assert-equal] non-hex color */
/*  */
/*  */
/* # Module: SVG Gradient [function] */
/* --------------------------------- */
/* Test: Hex color */
/*   ✔ [assert-equal] Hex color */
/*  */
/*  */
/* # Module: SVG Column Position [function] */
/* ---------------------------------------- */
/* Test: First column */
/*   ✔ [assert-equal] First column always has a position of zero */
/*  */
/* Test: First column */
/*   ✔ [assert-equal] Subtract one, and get the first/wide "push" span */
/*  */
/*  */
/* # Module: SVG Offset [function] */
/* ------------------------------- */
/* Test: No extra spread with defaults */
/*   ✔ [assert-false] No extra spread with defaults */
/*  */
/* Test: Container is wide */
/*   ✔ [assert-equal] Container is wide */
/*  */
/* Test: Container is wider */
/*   ✔ [assert-equal] Container is wider */
/*  */
/*  */
/* # Module: SVG Grid [function] */
/* ----------------------------- */
/* Test: Default grid settings */
/*   ✔ [assert-equal] Default grid settings */
/*  */
/* Test: Zero-length list grid should use default */
/*   ✔ [assert-equal] Zero-length list grid should use default */
/*  */
/* Test: Grid shorthand */
/*   ✔ [assert-equal] Should assume that non-explicit settings are context not span */
/*   ✔ [assert-equal] Most span data should be ignored */
/*  */
/* Test: Grid shorthand asymmetrical */
/*   ✔ [assert-equal] Understands context-only asymmetrical shorthand */
/*  */
/* Test: Grid shorthand spread */
/*   ✔ [assert-equal] Span spread is relevant to output */
/*  */
/* Test: Single-color override */
/*   ✔ [assert-equal] Single-color override */
/*  */
/* Test: Override offset */
/*   ✔ [assert-equal] Override offset */
/*  */
/* Test: Fixed Width */
/*   ✔ [assert-equal] Fixed Width */
/*  */
/*  */
/* # Module: SVG Grid (unprefixed) [function] */
/* ------------------------------------------ */
/* Test: Pass settings through */
/*   ✔ [assert-equal] Pass settings through */
/*  */
/*  */
/* # SUMMARY ---------- */
/* 155 Tests: */
/* - 155 Passed */
/* - 0 Failed */
/* Stats: */
/* - 39 Modules */
/* - 155 Tests */
/* - 167 Assertions */
/* -------------------- */
